/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {

	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tcrypto.h"
    include "stdio.h"
	trusted {

		/* Added for prototype */
//		public sgx_status_t enclave_ra_get_key_saved(
//			[out] sgx_status_t *get_keys_status, sgx_ra_context_t ctx,
//			sgx_ra_key_type_t type);


		/* ADded for prototype and taken from https://github.com/rodolfoams/sgx-aes-gcm/blob/master/CryptoEnclave/CryptoEnclave.edl */		

        public void setEncryptionKey([in, size=16] const char *keyInput);


		      /*
        * This function decrypts a message.
        * @param encMessageIn
        *    the encrypted message containing MAC + IV + encrypted message.
        * @param len
        *    the length of the encMessageIn.
        * @param decMessageOut
        *    the destination of the decrypted message.
        * @param lenOut
        *    the length of the decMessageOut.
        */
        public void decryptMessage([in,size=len] char *encMessageIn, size_t len, [out,size=lenOut] char *decMessageOut, size_t lenOut);
        


        /*
        * This function encrypts a message.
        * @param decMessageIn
        *    the original message
        * @param len
        *    the length of the decMessageIn.
        * @param encMessageOut
        *    the destination of the encrypted message containing MAC + IV + encrypted message.
        * @param lenOut
        *    the length of the encMessageOut.
        */
        public void encryptMessage([in,size=len] char *decMessageIn, size_t len, [out,size=lenOut] char *encMessageOut, size_t lenOut);


	};



    untrusted {
        //vorher string
        void ocall_print_string([in, size=16] const char *str);
        void ocall_print_hexkey([in, size=16] const char *str);
    };

};
